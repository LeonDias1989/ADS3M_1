package ordenacao.heap_sort;

public class HeapSort {

    public static <T extends Comparable<? super T>> void heapSort(T[] vetor) {
		buildMaxHeap(vetor);
        int n = vetor.length;
 
        for (int i = vetor.length - 1; i > 0; i--) {
            swap(vetor, i, 0);
            maxHeapify(vetor, 0, --n);
        }
    }
 
    private static <T extends Comparable<? super T>> void buildMaxHeap(T vetor[]) {
        for (int i = vetor.length / 2 - 1; i >= 0; i--)
            maxHeapify(vetor, i, vetor.length);
    }
 
    private static <T extends Comparable<? super T>> void maxHeapify(T[] vetor, int pos,
            int n) {
        int max = 2 * pos + 1, right = max + 1;
        if (max < n) {
            if (right < n && vetor[max].compareTo(vetor[right]) < 0)
                max = right;
            if (vetor[max].compareTo(vetor[pos]) > 0) {
                swap(vetor, max, pos);
                maxHeapify(vetor, max, n);
            }
        }
    }
 
    public static void swap(Object[] v, int j, int aposJ) {
        Object aux = v[j];
        v[j] = v[aposJ];
        v[aposJ] = aux;
    }
	
	
	
}
