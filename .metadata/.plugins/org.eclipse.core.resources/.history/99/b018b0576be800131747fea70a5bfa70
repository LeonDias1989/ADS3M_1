package arvore_bin;

import java.util.ArrayList;
import java.util.List;

public class TreeGenericDate<T extends Comparable<T>> {

	private List<NodoGeneric<T>> lista;
	
	public TreeGenericDate() {
		super();
		this.lista = new ArrayList<>();
	}

	public void inserir(NodoGeneric<T> n, T valor) {

		int compare = n.getDado().compareTo(valor);

		if (compare > 0) {

			if (n.getEsq() != null) {
				inserir(n.getEsq(), valor);
			} else {

				NodoGeneric<T> novoNodo = new NodoGeneric<>(valor);
				n.setEsq(novoNodo);
			}
		} else if (compare < 0) {

			if (n.getDir() != null) {
				inserir(n.getDir(), valor);
			} else {

				NodoGeneric<T> novoNodo = new NodoGeneric<>(valor);
				n.setDir(novoNodo);
			}
		}

	}

	

	/** Método de busca de elemento */
	public boolean temElemento(NodoGeneric<T> estrutura, T elemento) {

		boolean var = false;

		int compare = estrutura.getDado().compareTo(elemento);

		if (compare > 0) {

			if (estrutura.getEsq() != null) {
				lista.add(estrutura.getEsq());
				inserir(estrutura.getEsq(), elemento);
			} else {

				estrutura.setEsq(null);
			}
		} else if (compare < 0) {

			if (estrutura.getDir() != null) {
				lista.add(estrutura.getDir());
				inserir(estrutura.getDir(), elemento);
			} else {
				estrutura.setDir(null);
			}
		}
		return var;

	}

	public T getRaiz(NodoGeneric<T> nodo) {

		return nodo.getDado();
	}

	public void travessiaPre(NodoGeneric<T> nodo) {
		if (nodo != null) {

			nodo.imprimePrefixa();
		}
	}

	public void travessiaPos(NodoGeneric<T> nodo) {
		if (nodo != null) {

			nodo.imprimePosFixa();
		}
	}

	public void travessiaInf(NodoGeneric<T> nodo) {
		if (nodo != null) {
			nodo.imprimeInfixa();
		}
	}

	public static void main(String[] args) {

		NodoGeneric<String> n = new NodoGeneric<String>("4");

		TreeGenericDate<String> tree = new TreeGenericDate<>();

		tree.inserir(n, "2");
		tree.inserir(n, "5");
		tree.inserir(n, "1");
		tree.inserir(n, "7");
		tree.inserir(n, "9");
		tree.inserir(n, "3");

		System.out.println(tree.temElemento(n, "4"));

	}

}
